// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot;

import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.first.cscore.HttpCamera;
import edu.wpi.first.networktables.GenericEntry;
import edu.wpi.first.wpilibj.shuffleboard.BuiltInWidgets;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.shuffleboard.ShuffleboardTab;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The Constants class provides a convenient place for teams to hold robot-wide numerical or boolean
 * constants.  This class should not be used for any other purpose.  All constants should be
 * declared globally (i.e. public static).  Do not put anything functional in this class.
 *
 * <p>It is advised to statically import this class (or one of its inner classes) wherever the
 * constants are needed, to reduce verbosity.
 */
public class Constants {
    public static final class DPAD {
        public static final int kUp = 0;
        public static final int kRight = 90;
        public static final int kDown = 180;
        public static final int kLeft = 270; 
    }
    public static class PlacementSelector {

        private static boolean[][] array = new boolean[4][2];
        private static int currentRow = 0;
        private static int currentCol = 0;
        //private static GenericEntry[][] array1 = new GenericEntry[4][2];

        public PlacementSelector() {
        
            // Initially set the first element to true
            array[currentRow][currentCol] = true;
        }
    
        public static void move(int direction) {
            // Set the current true element to false
            array[currentRow][currentCol] = false;
            SmartDashboard.putBoolean(currentRow+"-"+currentCol, false);
            //array1[currentRow][currentCol].setBoolean(false);
    
            if (direction == Constants.DPAD.kDown && currentRow > 0) {
                currentRow--;
            } else if (direction == Constants.DPAD.kUp && currentRow < array.length - 1) {
                currentRow++;
            } else if (direction == Constants.DPAD.kLeft && currentCol > 0) {
                currentCol--;
            } else if (direction == Constants.DPAD.kRight && currentCol < array[0].length - 1) {
                currentCol++;
            }
    
            // Set the new position to true
            array[currentRow][currentCol] = true;
            SmartDashboard.putBoolean(currentRow+"-"+currentCol, true);
            //array1[currentRow][currentCol].setBoolean(true);
        }
        public static int getCurrentCol() { 
            return currentCol;
        }
        public static int getCurrentRow() { 
            return currentRow;
        }

        public static void initializeTab() { 
            // Add placement selector to REEFSCAPE tab
            //ShuffleboardTab mainTab = Shuffleboard.getTab("REEFSCAPE");
            // for (int i = 0; i<array1.length; i++){
            //     for (int j = 0; j<array1[i].length; j++){
            //         array1[i][j] = mainTab.add(i + "-" + j, false).withWidget(BuiltInWidgets.kBooleanBox).withPosition(j,Math.abs(i-3)).getEntry();
            //     }
            // }

            // SmartDashboard.putBoolean("0-0", true);
            // SmartDashboard.putBoolean("1-0", false);
            // SmartDashboard.putBoolean("2-0", false);
            // SmartDashboard.putBoolean("3-0", false);
            // SmartDashboard.putBoolean("0-1", false);
            // SmartDashboard.putBoolean("1-1", false);
            // SmartDashboard.putBoolean("2-1", false);
            // SmartDashboard.putBoolean("3-1", false);
            
            array[currentRow][currentCol] = true;
            for (int i = 0; i<array.length; i++){
                for (int j = 0; j<array[i].length; j++){
                    array[i][j] = false;
                    SmartDashboard.putBoolean(i+"-"+j, false);
                }
            }
            array[currentRow][currentCol] = true;
            SmartDashboard.putBoolean(currentRow+"-"+currentCol, true);
        }



   
        public static void printArray() { 
            for (boolean[] row : array) {
                for (boolean element : row) {
                    System.out.print(element + " ");
                }
                System.out.println();
            }
        }
    }
}

